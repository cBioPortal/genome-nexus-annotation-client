# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # - run:
      #     name: Update npm
      #     command: 'sudo npm install -g npm@3 && npm update -g'

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: "compile"
          command: "mvn clean install"

      - save_cache:
          paths:
          - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run test
      - run:
          name: "check if maf file still the same when annotating with uniprot transcripts"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar --filename test/data/data_mutations_extended_100.in.txt  --output-filename test/data/data_mutations_extended_100.out.uniprot.txt --isoform-override uniprot && git diff -G "^[^#]" --exit-code test/data/data_mutations_extended_100.out.uniprot.txt || (echo -e "MAF uniprot output changed test/data/data_mutations_extended_100.out.uniprot.txt $(cat test/data/data_mutations_extended_100.out.uniprot.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      - run:
          name: "check if maf file still the same when annotating with mskcc transcripts"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar --filename test/data/data_mutations_extended_100.in.txt  --output-filename test/data/data_mutations_extended_100.out.mskcc.txt --isoform-override mskcc && git diff -G "^[^#]" --exit-code test/data/data_mutations_extended_100.out.mskcc.txt || (echo -e "MAF mskcc output changed test/data/data_mutations_extended_100.out.mskcc.txt $(cat test/data/data_mutations_extended_100.out.mskcc.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      # run test
      - run:
          name: "check if minimal example maf file still the same when annotating with uniprot transcripts"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar -r --filename test/data/minimal_example.in.txt  --output-filename test/data/minimal_example.out.uniprot.txt --isoform-override uniprot && git diff -G "^[^#]" --exit-code test/data/minimal_example.out.uniprot.txt || (echo -e "simple MAF uniprot output changed test/data/minimal_example.out.uniprot.txt $(cat test/data/minimal_example.out.uniprot.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      - run:
          name: "check if corner cases example maf file still the same when annotating with uniprot transcripts"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar -r --filename test/data/corner_cases.two_tumor_seq_allele.in.txt  --output-filename test/data/corner_cases.two_tumor_seq_allele.out.uniprot.txt --isoform-override uniprot && git diff -G "^[^#]" --exit-code test/data/corner_cases.two_tumor_seq_allele.out.uniprot.txt || (echo -e "simple MAF uniprot output changed test/data/corner_cases.two_tumor_seq_allele.out.uniprot.txt $(cat test/data/corner_cases.two_tumor_seq_allele.out.uniprot.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      - run:
          name: "check if corner cases example maf file still the same when annotating with mskcc transcripts"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar -r --filename test/data/corner_cases.two_tumor_seq_allele.in.txt  --output-filename test/data/corner_cases.two_tumor_seq_allele.out.mskcc.txt --isoform-override mskcc && git diff -G "^[^#]" --exit-code test/data/corner_cases.two_tumor_seq_allele.out.mskcc.txt || (echo -e "simple MAF mskcc output changed test/data/corner_cases.two_tumor_seq_allele.out.mskcc.txt $(cat test/data/corner_cases.two_tumor_seq_allele.out.mskcc.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      - run:
          name: "check if corner cases example maf file still the same when annotating with uniprot transcripts"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar -r --filename test/data/corner_cases.in.txt  --output-filename test/data/corner_cases.out.uniprot.txt --isoform-override uniprot && git diff -G "^[^#]" --exit-code test/data/corner_cases.out.uniprot.txt || (echo -e "simple MAF uniprot output changed test/data/corner_cases.out.uniprot.txt $(cat test/data/corner_cases.out.uniprot.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      - run:
          name: "check if corner cases example maf file still the same when annotating with mskcc transcripts"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar -r --filename test/data/corner_cases.in.txt  --output-filename test/data/corner_cases.out.mskcc.txt --isoform-override mskcc && git diff -G "^[^#]" --exit-code test/data/corner_cases.out.mskcc.txt || (echo -e "simple MAF mskcc output changed test/data/corner_cases.out.mskcc.txt $(cat test/data/corner_cases.out.mskcc.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      - run:
          name: "Run vcf2maf test cases"
          command: 'sudo apt-get install make && ./test/scripts/vcf2maf_tests.sh'

      # run test
      - run:
          name: "check if maf file still the same when annotating with uniprot transcripts and POSTs"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar --filename test/data/data_mutations_extended_100.in.txt  --output-filename test/data/data_mutations_extended_100.out..post.uniprot.txt --isoform-override uniprot && git diff -G "^[^#]" --exit-code test/data/data_mutations_extended_100.out.uniprot.txt || (echo -e "MAF uniprot output changed test/data/data_mutations_extended_100.out.uniprot.txt $(cat test/data/data_mutations_extended_100.out.uniprot.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      - run:
          name: "check if maf file still the same when annotating with mskcc transcripts and POSTs"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar --filename test/data/data_mutations_extended_100.in.txt  --output-filename test/data/data_mutations_extended_100.out.post.mskcc.txt --isoform-override mskcc && git diff -G "^[^#]" --exit-code test/data/data_mutations_extended_100.out.mskcc.txt || (echo -e "MAF mskcc output changed test/data/data_mutations_extended_100.out.mskcc.txt $(cat test/data/data_mutations_extended_100.out.mskcc.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

      # run test
      - run:
          name: "check if minimal example maf file still the same when annotating with uniprot transcripts and POSTs"
          command: 'java -jar annotationPipeline/target/annotationPipeline-*.jar -r --filename test/data/minimal_example.in.txt  --output-filename test/data/minimal_example.out.post.uniprot.txt --isoform-override uniprot && git diff -G "^[^#]" --exit-code test/data/minimal_example.out.uniprot.txt || (echo -e "simple MAF uniprot output changed test/data/minimal_example.out.uniprot.txt $(cat test/data/minimal_example.out.uniprot.txt | curl -F c=@- https://ptpb.pw | grep url) (include this file in your PR to fix this test)" && exit 1)'

workflows:
  version: 2
  commit:
    jobs:
      - build
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
